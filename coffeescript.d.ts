import * as babel from "babel-core";

type IObject = Record<string, unknown>;

/**
 * CoffeeScript compiler options.
 *
 * @member ast If true, output an abstract syntax tree of the input CoffeeScript source code.
 * @member bare If true, omit a top-level IIFE safety wrapper.
 * @member filename File name to compile - defaults to `index.js`.
 * @member header If true, output the `Generated by CoffeeScript` header.
 * @member inlineMap If true, output the source map as a base64-encoded string in a comment at the bottom.
 * @member sourceMap If true, output a source map object with the code.
 * @member transpile Babel transpilation options - see `babel.TransformOptions`.
 */
export interface ICoffeeScriptOptions {
  ast?: boolean;
  bare?: boolean;
  filename?: string;
  header?: boolean;
  inlineMap?: boolean;
  sourceMap?: boolean;
  transpile?: babel.TransformOptions;
}

/**
 * CoffeeScript abstract syntax tree location data.
 */
 export interface CoffeeScriptASTNodeLocationData {
  first_column: number;
  first_line: number;
  last_line: number;
  last_column: number;
}

/**
 * CoffeeScript abstract syntax tree member for base namespaces.
 */
 export interface CoffeeScriptASTBase {
  locationData: CoffeeScriptASTNodeLocationData;
  value: string;
}

/**
 * CoffeeScript abstract syntax tree member for variable names.
 */
 export interface CoffeeScriptASTName {
  locationData: CoffeeScriptASTNodeLocationData;
  name: CoffeeScriptASTName;
  soak: boolean;
}

/**
 * CoffeeScript abstract syntax tree for properties and indexes.
 */
 export interface CoffeeScriptASTProperty {
  locationData: CoffeeScriptASTNodeLocationData;
  name: CoffeeScriptASTName;
}

/**
 * CoffeeScript's abstract syntax tree node interfaces with all possible node properties.
 */
export interface CoffeeScriptASTNode {
  args: CoffeeScriptASTNode[] | [];
  base?: CoffeeScriptASTBase;
  body: CoffeeScriptASTBody;
  boundFuncs?: CoffeeScriptASTNode[] | [];
  context?: string;
  classBody?: boolean;
  expressions?: CoffeeScriptASTNode[] | [];
  isNew?: boolean;
  isSuper?: boolean;
  locationData: CoffeeScriptASTNodeLocationData;
  properties?: CoffeeScriptASTProperty[] | [];
  param?: boolean;
  parent?: CoffeeScriptASTNode;
  soak?: boolean;
  subpattern?: boolean;
  variable: CoffeeScriptASTNode;
}

export interface CoffeeScriptASTBody {
  classBody: boolean;
  expressions: CoffeeScriptASTNode[] | [];
  locationData: CoffeeScriptASTNodeLocationData;
}

/**
 * List of precompiled CoffeeScript file extensions.
 */
export let FILE_EXTENSIONS: string[];

/**
 * Version number of the CoffeeScript compiler.
 */
export let VERSION: string;

/**
 * Helpers used internally to compile CoffeeScript.
 *
 * @deprecated for external use and lacking TypeScript definitions.
 */
export interface helpers {
  [handle: string]: (...args: any[]) => any;
}

/**
 * Transpiles CoffeeScript to legacy, high-compatibility ECMAScript versions using Babel.
 *
 * @param {string} code CoffeeScript code to be compiled.
 * @param {ICoffeeScriptOptions} [options] CoffeeScript compiler options.
 * @param {boolean} [options.ast=false] If true, output an abstract syntax tree of the input CoffeeScript source code.
 * @param {boolean} [options.bare=false] If true, omit a top-level IIFE safety wrapper.
 * @param {string} [options.filename=index.js] File name to compile.
 * @param {boolean} [options.header=false] If true, output the `Generated by CoffeeScript` header.
 * @param {boolean} [options.inlineMap=false] If true, output the source map as a base64-encoded string in a comment at the bottom.
 * @param {boolean} [options.sourceMap=false] If true, output a source map object with the code.
 * @param {babel.TransformOptions} [options.transpile={}] Babel transpilation options - see `babel.TransformOptions`.
 * @returns {babel.BabelFileResult} Babel transpiler result for file.
 */
export function transpile(code: string, options?: ICoffeeScriptOptions): babel.BabelFileResult | undefined;

/**
 * Compiles CoffeeScript to JavaScript code, then outputs it as a string.
 *
 * @param {string} code CoffeeScript code to be compiled.
 * @param {ICoffeeScriptOptions} [options] CoffeeScript compiler options.
 * @param {boolean} [options.ast=false] If true, output an abstract syntax tree of the input CoffeeScript source code.
 * @param {boolean} [options.bare=false] If true, omit a top-level IIFE safety wrapper.
 * @param {string} [options.filename=index.js] File name to compile.
 * @param {boolean} [options.header=false] If true, output the `Generated by CoffeeScript` header.
 * @param {boolean} [options.inlineMap=false] If true, output the source map as a base64-encoded string in a comment at the bottom.
 * @param {boolean} [options.sourceMap=false] If true, output a source map object with the code.
 * @param {babel.TransformOptions} [options.transpile={}] Babel transpilation options - see `babel.TransformOptions`.
 * @returns {string} Compiled and unevaluated JavaScript code.
 */
export function compile(code: string, options?: ICoffeeScriptOptions): string | undefined;

/**
 * Parse a string of CoffeeScript code or an array of lexed tokens, and return the AST. You can then compile it by
 * calling `.compile()` on the root, or traverse it by using `.traverseChildren()` with a callback.
 *
 * @param {string} code CoffeeScript code to be compiled.
 * @param {ICoffeeScriptOptions} [options] CoffeeScript compiler options.
 * @param {boolean} [options.ast=false] If true, output an abstract syntax tree of the input CoffeeScript source code.
 * @param {boolean} [options.bare=false] If true, omit a top-level IIFE safety wrapper.
 * @param {string} [options.filename=index.js] File name to compile.
 * @param {boolean} [options.header=false] If true, output the `Generated by CoffeeScript` header.
 * @param {boolean} [options.inlineMap=false] If true, output the source map as a base64-encoded string in a comment
 * at the bottom.
 * @param {boolean} [options.sourceMap=false] If true, output a source map object with the code.
 * @param {babel.TransformOptions} [options.transpile={}] Babel transpilation options - see `babel.TransformOptions`.
 * @returns {CoffeeScriptASTBody} Compiled and unevaluated JavaScript code.
 */
export function nodes(code: string, options?: ICoffeeScriptOptions): CoffeeScriptASTBody | undefined;

/**
 * Compiles and executes a CoffeeScript string in the NodeJS environment.
 * Evaluates `__filename` and `__dirname` correctly in order to execute the CoffeeScript input.
 *
 * @param {string} code CoffeeScript code to be compiled.
 * @param {ICoffeeScriptOptions} [options] CoffeeScript compiler options.
 * @param {boolean} [options.ast=false] If true, output an abstract syntax tree of the input CoffeeScript source code.
 * @param {boolean} [options.bare=false] If true, omit a top-level IIFE safety wrapper.
 * @param {string} [options.filename=index.js] File name to compile.
 * @param {boolean} [options.header=false] If true, output the `Generated by CoffeeScript` header.
 * @param {boolean} [options.inlineMap=false] If true, output the source map as a base64-encoded string in a comment at the bottom.
 * @param {boolean} [options.sourceMap=false] If true, output a source map object with the code.
 * @param {babel.TransformOptions} [options.transpile={}] Babel transpilation options - see `babel.TransformOptions`.
 * @returns Output of evaluated CoffeeScript code in the NodeJS environment.
 */
export function run(code: string, options?: ICoffeeScriptOptions): any;

/**
 * Compiles and executes a CoffeeScript string in a NodeJS-like browser environment.
 * The CoffeeScript REPL uses this to run the input.
 *
 * @function eval
 * @param {string} code CoffeeScript code to be compiled.
 * @param {ICoffeeScriptOptions} [options] CoffeeScript compiler options.
 * @param {boolean} [options.ast=false] If true, output an abstract syntax tree of the input CoffeeScript source code.
 * @param {boolean} [options.bare=false] If true, omit a top-level IIFE safety wrapper.
 * @param {string} [options.filename=index.js] File name to compile.
 * @param {boolean} [options.header=false] If true, output the `Generated by CoffeeScript` header.
 * @param {boolean} [options.inlineMap=false] If true, output the source map as a Base64-encoded string in a comment at the bottom.
 * @param {boolean} [options.sourceMap=false] If true, output a source map object with the code.
 * @param {babel.TransformOptions} [options.transpile={}] Babel transpilation options - see `babel.TransformOptions`.
 * @returns Output of evaluated CoffeeScript code in the browser environment.
 */
export interface eval { (code: string, options?: ICoffeeScriptOptions): any } // hack to avoid TS eval call protection

/**
 * Node's module loader, patched to be able to handle multi-dot extensions.
 * This is a horrible thing that should not be required.
 */
export function register(): {
  [path: string]: IObject | undefined;
  (path: string): IObject | undefined;
};

/**
 * Synchronous module definitions for the CoffeeScript library files.
 *
 * @param {string} path Path to CoffeeScript library submodule relative to the `./lib/coffeescript` directory.
 * @returns {(object|undefined)} CoffeeScript library submodule.
 */
export interface require {
  [path: string]: IObject;
  (path: string): require[keyof require] | undefined;
}

/**
 * Compiles a raw CoffeeScript file buffer string.
 * Requires UTF-8 character encoding on the `raw` input string.
 * Strip the Unicode byte order mark, if `filename` begins with one.
 *
 * @param {string} raw Raw UTF-8 CoffeeScript file contents.
 * @param {string} filename File name with extension (not including directories).
 * @param {ICoffeeScriptOptions} [options] CoffeeScript compiler options.
 * @param {boolean} [options.ast=false] If true, output an abstract syntax tree of the input CoffeeScript source code.
 * @param {boolean} [options.bare=false] If true, omit a top-level IIFE safety wrapper.
 * @param {string} [options.filename=index.js] File name to compile.
 * @param {boolean} [options.header=false] If true, output the `Generated by CoffeeScript` header.
 * @param {boolean} [options.inlineMap=false] If true, output the source map as a Base64-encoded string in a comment at the bottom.
 * @param {boolean} [options.sourceMap=false] If true, output a source map object with the code.
 * @private
 */
export function _compileRawFileContent(raw: string, filename: string, options?: ICoffeeScriptOptions): string | undefined;

/**
 * Reads and compiles a CoffeeScript file using `fs.readFileSync`.
 * NodeJS wrapper around `coffeescript._compileRawFileContent`.
 * Files are decoded as if they are UTF-8 character encoded or compliant with UTF-8.
 *
 * @param {string} raw Raw UTF-8 CoffeeScript file contents.
 * @param {string} filename File name with extension (not including directories).
 * @param {ICoffeeScriptOptions} [options] CoffeeScript compiler options.
 * @param {boolean} [options.ast=false] If true, output an abstract syntax tree of the input CoffeeScript source code.
 * @param {boolean} [options.bare=false] If true, omit a top-level IIFE safety wrapper.
 * @param {string} [options.filename=index.js] File name to compile.
 * @param {boolean} [options.header=false] If true, output the `Generated by CoffeeScript` header.
 * @param {boolean} [options.inlineMap=false] If true, output the source map as a Base64-encoded string in a comment at the bottom.
 * @param {boolean} [options.sourceMap=false] If true, output a source map object with the code.
 * @private
 */
export function _compileFile(filename: string, options?: ICoffeeScriptOptions): string | undefined;