- allow interpolated string attribute values eg %h1( id="recipe-#{ x }" )
- allow simple unquoted attribute values eg %p( key=i ) (or is this confusing/not preferable to HTML allowing unquoted attribute values?)
- allow line-ending inline comments after inline elements eg %h1 # this is an h1 tag
- handle inline element (with or without body?) followed by indent eg:
  if isSomething %abc
    x
- refine attribute error reporting so that eg %h1( x=[abc] ) will specifically tell you the attribute value is what's wrong
- refactor attribute value nested lexing to share code with matchWithInterpolations()
- spacing in element children?
- compile empty element to eg <a /> instead of <a></a>? is there a semantic difference to JSX and/or HTML?
- className and other attribute-name translations (automatically camelCase, that's what JSX wants?)
- allow normal Coffeescript (line) comments inside (indented) element body
- support object spread operator in all 3 types of attributes
- handle no-value attributes in () and <> attributes (implicit value is true?)
- support haml-style nested object attributes? eg ng: { click: ... } - or is that ambiguous w/ possible object-literal value of top-level attribute?
- handle comments inside object attributes?
- don't wrap string literal object attribute values in braces eg %h1{ a: 'b' } >> <h1 a='b'>, not <h1 a={'b'}>
- support haml-style class and id attribute merging? should also imitate haml wrt other duplicate attributes eg %a( b='c' ){ b: 'd' } >> <a b='d'> (looks like object always wins)?
- should it allow else nested at same depth as = if? eg:
  %h1
    = if x
      %abc
    else
      %def
- allow leading-dot class shorthand after blank line?
- allow/parse inline tag after content? eg
  %h1
    hello<span class={@abc}>World</span>
