// Generated by CoffeeScript 1.3.2
(function() {
  var Child, EmptyClass, LOG, Parent,
    __defineStaticProperty = function(clazz, key, value) {
  if(typeof clazz.__defineStaticProperty == 'function') return clazz.__defineStaticProperty(key, value);
  return clazz[key] = value;
},
    __defineProperty = function(clazz, key, value) {
  if(typeof clazz.__defineProperty == 'function') return clazz.__defineProperty(key, value);
  return clazz.prototype[key] = value;
},
    __hasProp = {}.hasOwnProperty,
    __extends =   function(child, parent) { 
    if(typeof parent.__extend == 'function') return parent.__extend(child);
      
    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } 
    function ctor() { this.constructor = child; } 
    ctor.prototype = parent.prototype; 
    child.prototype = new ctor; 
    child.__super__ = parent.prototype; 
    if(typeof parent.extended == 'function') parent.extended(child); 
    return child; 
};

  LOG = console.log;

  EmptyClass = (function() {

    function EmptyClass() {}

    return EmptyClass;

  })();

  Parent = (function() {

    function Parent() {}

    LOG('executed on class body');

    __defineStaticProperty(Parent,  "classVar1", "parent - classVar1");

    __defineStaticProperty(Parent,  "classMethod1", function() {
      Parent.__super__.constructor[ "classMethod1"].apply(this, arguments);
      return "parent - classMethod1";
    });

    __defineProperty(Parent,  "var1", "parent - var1");

    __defineProperty(Parent,  "method1", function() {
      Parent.__super__[ "method1"].apply(this, arguments);
      return "parent - emthod1";
    });

    __defineStaticProperty(Parent,  "classVar2", "parent - classVar2");

    __defineStaticProperty(Parent,  "classMethod2", function() {
      return "parent - classMethod2";
    });

    __defineProperty(Parent,  "var2", "parent - var2");

    __defineProperty(Parent,  "method2", function() {
      return "parent - emthod2";
    });

    return Parent;

  })();

  Child = (function(_super) {

    function Child() {
      return Child.__super__.constructor.apply(this, arguments);
    }

    Child = __extends(Child, _super);

    LOG('executed on class body');

    __defineStaticProperty(Child,  "classVar1", "child - classVar1");

    __defineStaticProperty(Child,  "classMethod1", function() {
      return "child - classMethod1";
    });

    __defineProperty(Child,  "var1", "child - var1");

    __defineProperty(Child,  "method1", function() {
      return "child - emthod1";
    });

    __defineStaticProperty(Child,  "classVar2", "child - classVar2");

    __defineStaticProperty(Child,  "classMethod2", function() {
      return "child - classMethod2";
    });

    __defineProperty(Child,  "var2", "child - var2");

    __defineProperty(Child,  "method2", function() {
      return "child - emthod2";
    });

    return Child;

  })(Parent);

}).call(this);
