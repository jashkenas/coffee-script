// Generated by CoffeeScript 1.6.3
(function() {
  var CoffeeScript, fs, helpers, loadFile, path;

  fs = require('fs');

  path = require('path');

  helpers = require('./helpers');

  CoffeeScript = require('./coffee-script');

  exports.fileExtensions = ['.coffee', '.litcoffee', '.coffee.md'];

  loadFile = function(module, filename) {
    var answer;
    answer = exports.compileFile(filename, false);
    return module._compile(answer, filename);
  };

  exports.registerRequire = function(require) {
    var Module, ext, findExtension, _i, _len, _ref;
    if (require.extensions) {
      _ref = exports.fileExtensions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ext = _ref[_i];
        require.extensions[ext] = loadFile;
      }
      Module = require('module');
      findExtension = function(filename) {
        var curExtension, extensions;
        extensions = path.basename(filename).split('.');
        if (extensions[0] === '') {
          extensions.shift();
        }
        while (extensions.shift()) {
          curExtension = '.' + extensions.join('.');
          if (Module._extensions[curExtension]) {
            return curExtension;
          }
        }
        return '.js';
      };
      return Module.prototype.load = function(filename) {
        var extension;
        this.filename = filename;
        this.paths = Module._nodeModulePaths(path.dirname(filename));
        extension = findExtension(filename);
        Module._extensions[extension](this, filename);
        return this.loaded = true;
      };
    }
  };

  exports.compileFile = function(filename, sourceMap) {
    var answer, err, raw, stripped;
    raw = fs.readFileSync(filename, 'utf8');
    stripped = raw.charCodeAt(0) === 0xFEFF ? raw.substring(1) : raw;
    try {
      answer = CoffeeScript.compile(stripped, {
        filename: filename,
        sourceMap: sourceMap,
        literate: helpers.isLiterate(filename)
      });
    } catch (_error) {
      err = _error;
      err.filename = filename;
      err.code = stripped;
      throw err;
    }
    return answer;
  };

}).call(this);
